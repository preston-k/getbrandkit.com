import path from 'path';

// node_modules/es-tostring/index.mjs
var toString = function(obj) {
  return Object.prototype.toString.call(obj)
};

// node_modules/es-hasown/index.mjs

// node_modules/es-is/bool.js
// Generated by CoffeeScript 1.12.5
var isBool;

var isBool$1 = isBool = function(value) {
  return toString(value) === '[object Boolean]';
};

// node_modules/es-is/infinite.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/number.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/array-like.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/array.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/function.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/object.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/arguments.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/async-function.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/string.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/base64.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/date.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/utils.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/decimal.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/defined.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/divisible-by.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/element.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/empty-arguments.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/empty-array.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/empty.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/equal.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/error.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/even.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/false.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/generator-function.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/generator.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/ge.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/gt.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/hash.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/hex.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/hosted.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/instanceof.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/integer.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/le.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/lt.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/max.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/min.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/nan.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/null.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/odd.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/primitive.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/promise.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/regexp.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/symbol.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/true.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/type.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/undefined.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/valid-date.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/within.js
// Generated by CoffeeScript 1.12.5

// node_modules/es-is/index.mjs
// Generated by CoffeeScript 1.12.5

// src/index.coffee
var findCoffee;
var resolveCoffee;
var version;

// Check version of coffee found
version = function(coffeePath) {
  var pkg;
  pkg = require(path.resolve(coffeePath, '../../../package.json'));
  return parseInt((pkg.version.split('.'))[0], 10);
};

// Resolve specific version of coffee, matching either package name
resolveCoffee = function(wanted) {
  var coffeePath, err, i, len, pkg, pkgs;
  pkgs = ['coffeescript', 'coffee-script'];
  for (i = 0, len = pkgs.length; i < len; i++) {
    pkg = pkgs[i];
    try {
      coffeePath = require.resolve(pkg);
      if ((version(coffeePath)) === wanted) {
        return coffeePath;
      }
    } catch (error) {
      
    }
  }
  throw new Error('Unable to find CoffeeScript matching version ' + wanted);
};

// Find and return coffee version, or alternately just path
var index = findCoffee = function(wanted, lazy) {
  var err, pkgPath;
  if (isBool$1(wanted)) {
    [wanted, lazy] = [lazy, wanted];
  }
  // Default to 2, but take accept 1
  if (!((wanted != null) || wanted === 'any')) {
    try {
      return findCoffee(2, lazy);
    } catch (error) {
      return findCoffee(1, lazy);
    }
  }
  // Resolve path to package
  pkgPath = resolveCoffee(wanted);
  // If lazy only return path
  if (lazy) {
    return pkgPath;
  } else {
    return require(pkgPath);
  }
};

export default index;
//# sourceMappingURL=find-coffee.es.js.map
