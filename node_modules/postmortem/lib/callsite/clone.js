// Generated by CoffeeScript 1.12.4
var CallSiteToString;

CallSiteToString = function() {
  var addSuffix, columnNumber, fileLocation, fileName, functionName, isConstructor, isMethodCall, line, lineNumber, methodName, typeName;
  fileName = void 0;
  fileLocation = '';
  if (this.isNative()) {
    fileLocation = 'native';
  } else {
    fileName = this.getScriptNameOrSourceURL();
    if (!fileName && this.isEval()) {
      fileLocation = this.getEvalOrigin();
      fileLocation += ', ';
    }
    if (fileName) {
      fileLocation += fileName;
    } else {
      fileLocation += '<anonymous>';
    }
    lineNumber = this.getLineNumber();
    if (lineNumber !== null) {
      fileLocation += ':' + lineNumber;
      columnNumber = this.getColumnNumber();
      if (columnNumber) {
        fileLocation += ':' + columnNumber;
      }
    }
  }
  line = '';
  functionName = this.getFunctionName();
  addSuffix = true;
  isConstructor = this.isConstructor();
  isMethodCall = !(this.isToplevel() || isConstructor);
  if (isMethodCall) {
    typeName = this.getTypeName();
    methodName = this.getMethodName();
    if (functionName) {
      if (typeName && functionName.indexOf(typeName) !== 0) {
        line += typeName + '.';
      }
      line += functionName;
      if (methodName && functionName.indexOf('.' + methodName) !== functionName.length - methodName.length - 1) {
        line += ' [as ' + methodName + ']';
      }
    } else {
      line += typeName + '.' + (methodName || '<anonymous>');
    }
  } else if (isConstructor) {
    line += 'new ' + (functionName || '<anonymous>');
  } else if (functionName) {
    line += functionName;
  } else {
    line += fileLocation;
    addSuffix = false;
  }
  if (addSuffix) {
    line += ' (' + fileLocation + ')';
  }
  return line;
};

module.exports = function(frame) {
  var _frame, fn, i, len, name, proto, ref;
  _frame = {};
  proto = Object.getPrototypeOf(frame);
  ref = Object.getOwnPropertyNames(proto);
  fn = function(name) {
    if (/^(?:is|get)/.test(name)) {
      return _frame[name] = function() {
        return frame[name].call(frame);
      };
    } else {
      return _frame[name] = frame[name];
    }
  };
  for (i = 0, len = ref.length; i < len; i++) {
    name = ref[i];
    fn(name);
  }
  _frame.toString = CallSiteToString;
  return _frame;
};

//# sourceMappingURL=clone.js.map
