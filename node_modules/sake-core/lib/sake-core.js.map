{"version":3,"file":"sake-core.js","sources":["../node_modules/es-tostring/index.mjs","../node_modules/es-is/src/array.coffee","../node_modules/es-is/src/function.coffee","../node_modules/es-is/src/string.coffee","../src/log.coffee","../node_modules/es-is/src/generator-function.coffee","../src/tasks.coffee","../src/running.coffee","../src/invoke/async.coffee","../node_modules/es-is/src/promise.coffee","../src/invoke/generator.coffee","../src/invoke/sync.coffee","../src/invoke/serial.coffee","../src/invoke/invoke.coffee","../src/invoke/parallel.coffee","../src/invoke/index.coffee","../src/options.coffee","../src/option.coffee","../src/task.coffee","../src/use.coffee","../src/watch.coffee","../src/sake.coffee"],"sourcesContent":["export default function(obj) {\n  return Object.prototype.toString.call(obj)\n}\n","import toString from 'es-tostring'\n\n# Test if 'value' is an array.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an array, false otherwise\n# @api public\nexport default isArray = Array.isArray or (value) ->\n  toString(value) == '[object Array]'\n","import toString from 'es-tostring'\n\n# Test if `value` is a function.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a function, false otherwise\n# @api public\nexport default isFunction = (value) ->\n  # Is alert\n  return true if typeof window != 'undefined' and value == window.alert\n\n  str = toString(value)\n\n  str == '[object Function]' or\n  str == '[object GeneratorFunction]' or\n  str == '[object AsyncFunction]'\n","import toString from 'es-tostring'\n\n# Test if `value` is a string.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is a string, false otherwise\n# @api public\nexport default isString = (value) ->\n  toString(value) == '[object String]'\n","import chalk    from 'chalk'\nimport isString from 'es-is/string'\n\nverbose = process.env.VERBOSE ? false\n\npretty = (obj) ->\n  JSON.stringify obj, null, 2\n\nlogger = (method, color) ->\n  prefix = chalk[color] method\n\n  (args...) ->\n    return unless verbose\n\n    msg = prefix\n\n    for arg in args\n      if isString arg\n        msg += ' ' + arg\n      else\n        msg += '\\n' + pretty arg\n\n    console.log msg\n\nmethods =\n  debug:    'blue'\n  info:     'white'\n  warn:     'yellow'\n  error:    'red'\n\n  bebop:    'black'\n  modified: 'cyan'\n  compiled: 'blue'\n\nwrapper = logger 'info', 'white'\nfor k,v of methods\n  wrapper[k] = logger k,v\n\nwrapper.verbose = (bool = !verbose) ->\n  verbose = bool\n\nexport default wrapper\n","import toString from 'es-tostring'\n\n# Test if `value` is a generator function.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a generator function, false otherwise\n# @api public\nexport default isGeneratorFunction = (value) ->\n  toString(value) == '[object GeneratorFunction]'\n","# Global task cache\ntasks = {}\n\ntasks.has = (key) ->\n  tasks[key]?\n\nexport default tasks\n","import log from './log'\n\n# Keep track of running tasks\nrunningTasks = {}\n\nrunning = (name) ->\n  return runningTasks[name]\n\nrunning.start = (name) ->\n  log.info 'running', name\n  runningTasks[name] = true\n\nrunning.stop = (name) ->\n  log.info 'stopped', name\n  runningTasks[name] = false\n\nexport default running\n","import log     from '../log'\nimport running from '../running'\n\n# Invoke async task\ninvokeAsync = (name, action, opts, cb) ->\n  log.debug 'invokeAsync', name\n\n  running.start name\n\n  done = ->\n    running.stop name\n    cb.apply null, arguments\n\n  if opts?\n    action opts, done\n  else\n    action done\n\nexport default invokeAsync\n","# Test if `value` is a promise.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a promise, false otherwise\n# @api public\nexport default isPromise = (value) ->\n  !!value and (\n    typeof value == 'object' or\n    typeof value == 'function'\n  ) and typeof value.then == 'function'\n","import log       from '../log'\nimport running   from '../running'\nimport isPromise from 'es-is/promise'\n\n\n# Invoke a enerator task continually until consumed\ninvokeGenerator = (name, action, opts, cb) ->\n  log.debug 'invokeGenerator', name\n\n  running.start name\n\n  gen = action opts\n\n  last = null\n  prev = null\n\n  done = (err) ->\n    running.stop name\n    console.error err.stack if err?\n    cb err, (last ? prev)\n\n  next = (value) ->\n    try\n      res = gen.next value\n    catch err\n      console.error err.stack\n      return done err\n\n    prev = last\n    last = res.value\n\n    if isPromise promise = res.value\n      promise\n        .then (value) ->\n          next value\n        .catch (err) ->\n          done err\n    else if not res.done\n      next res.value\n    else\n      done()\n\n  next()\n\nexport default invokeGenerator\n","import isPromise from 'es-is/promise'\n\nimport log     from '../log'\nimport running from '../running'\n\n\n# Invoke sync task\ninvokeSync = (name, action, opts, cb) ->\n  log.debug 'invokeSync', name\n\n  running.start name\n\n  ret = action opts\n\n  if isPromise promise = ret\n    promise\n      .then (value) ->\n        running.stop name\n        cb null, value\n      .catch (err) ->\n        running.stop name\n        cb err\n  else\n    running.stop name\n    cb null, ret\n\nexport default invokeSync\n","import isFunction from 'es-is/function'\n\nimport log from '../log'\n\nimport invoke from './invoke'\n\n\n# Invoke tasks in serial\ninvokeSerial = (tasks, opts, cb) ->\n  log.debug 'invokeSerial', tasks, opts\n\n  serial = (cb) ->\n    next = (err) ->\n      return cb err if err?\n\n      if tasks.length\n        invoke tasks.shift(), opts, next\n      else\n        cb()\n    next()\n\n  return (serial cb) if isFunction cb\n\n  new Promise (resolve, reject) ->\n    serial (err) ->\n      reject err if err?\n      resolve()\n      cb err if isFunction cb\n\nexport default invokeSerial\n","import isFunction          from 'es-is/function'\nimport isGeneratorFunction from 'es-is/generator-function'\n\nimport log   from '../log'\nimport tasks from '../tasks'\n\nimport invokeAsync     from './async'\nimport invokeGenerator from './generator'\nimport invokeSync      from './sync'\nimport serial          from './serial'\n\ninvoked = {}\n\n# Invoke delegates to one of the above\ninvoke = (name, opts, cb) ->\n  log.debug 'invoke', name, opts\n\n  # Prevent recursive calls\n  return if invoked[name]\n  invoked[name] = true\n\n  unless (task = tasks[name])?\n    throw new Error \"No such task: #{name}\"\n\n  # Grab task action, any deps and parsed options\n  {action, deps} = tasks[name]\n\n  done = (err) ->\n    invoked = {}\n    (cb err) if isFunction cb\n\n  invokeAction = (err) ->\n    return done err if err?\n\n    # Is a generator task\n    if isGeneratorFunction action\n      return invokeGenerator name, action, opts, done\n\n    # Two arguments, action expects callback\n    if action.length == 2\n      return invokeAsync name, action, opts, done\n\n    # Single argument, detected callback\n    if /^function \\((callback|cb|done|next)\\)/.test action\n      return invokeAsync name, action, null, done\n\n    # 0 or 1 argument action, no callback detected\n    invokeSync name, action, opts, done\n\n  # Process deps first if any\n  return serial deps, opts, invokeAction\n\n  invokeAction()\n\nexport default invoke\n","import isFunction from 'es-is/function'\n\nimport log from '../log'\n\nimport invoke from './invoke'\n\n# Invoke tasks in serial\ninvokeParallel = (tasks, opts, cb) ->\n  log.debug 'invokeParallel', tasks, opts\n\n  parallel = (cb) ->\n    done = 0\n    for task in tasks\n      invoke task, opts, ->\n        if ++done == tasks.length\n          cb()\n\n  return (parallel cb) if isFunction cb\n\n  new Promise (resolve, reject) ->\n    parallel (err) ->\n      reject err if err?\n      resolve()\n      cb err if isFunction cb\n\nexport default invokeParallel\n","import isArray    from 'es-is/array'\nimport isFunction from 'es-is/function'\n\nimport parallel from './parallel'\nimport serial   from './serial'\n\n# Wrap invokeSerial, invokeParallel to ensure sane arguments\nwrap = (fn) ->\n  (tasks, opts, cb) ->\n    # Ensure tasks are an array\n    tasks = [tasks] unless isArray tasks\n\n    # Called with a callback and no options\n    if isFunction opts\n      [cb, opts] = [opts, {}]\n\n    # Ensure opts exists\n    opts ?= {}\n\n    fn tasks, opts, cb\n\nwrapper = wrap serial\nwrapper.serial   = wrapper  # aliased\nwrapper.parallel = wrap parallel\n\nexport default wrapper\n","# Global options cache\noptions = {}\n\noptions.has = (key) ->\n  options[key]?\n\nexport default options\n","import options from './options'\n\nexport default (letter, flag, description) ->\n  unless description?\n    [description, flag] = [flag, null]\n\n  options[letter] =\n    letter:      letter\n    flag:        flag\n    description: description\n","import isArray    from 'es-is/array'\nimport isFunction from 'es-is/function'\n\nimport log   from './log'\nimport tasks from './tasks'\n\nexport default (name, description, deps, action) ->\n  # No description, just deps\n  if isArray description\n    action = deps if isFunction deps\n    [description, deps] = ['', description]\n\n  # If we're passed name, action\n  if isFunction description\n    [action, description, deps] = [description, '', []]\n\n  # No dependencies specified, ex: `task 'name', 'description', ->`\n  if isFunction deps\n    [action, deps] = [deps, []]\n\n  # Missing task function (body), ex: `task 'name', 'description', ['1','2','3']`\n  unless isFunction action\n    action = ->\n\n  # Store reference for ourselves\n  tasks[name] =\n    name:        name\n    description: description\n    deps:        deps\n    action:      action\n\n  log.debug 'added task', tasks[name]\n","import isFunction from 'es-is/function'\nimport isString   from 'es-is/string'\nimport resolve    from 'resolve'\n\nexport default (pkg, opts = {}) ->\n  if isString pkg\n    path = resolve.sync pkg, basedir: process.cwd()\n    pkg = require path\n\n    # Support CJS formatted ES modules with named + default exports\n    if pkg.default?\n      pkg = pkg.default\n\n  if isFunction pkg\n    pkg opts\n","import isFunction from 'es-is/function'\nimport isString   from 'es-is/string'\nimport vigil      from 'vigil'\n\nexport default (dir, task, opts = {}) ->\n  if isString task\n    fn = -> invoke task\n  else if isFunction task\n    fn = task\n  vigil.watch dir, fn, opts\n","import exec   from 'executive'\nimport {join} from 'path'\n\nimport invoke   from './invoke'\nimport option   from './option'\nimport options  from './options'\nimport parallel from './invoke/parallel'\nimport running  from './running'\nimport serial   from './invoke/serial'\nimport task     from './task'\nimport tasks    from './tasks'\nimport use      from './use'\nimport watch    from './watch'\n\nimport {version} from '../package.json'\n\ninstall = ->\n  # Ensure local node_modules bin is on the front of $PATH\n  binPath = join process.cwd(), 'node_modules/', '.bin'\n  process.env.PATH = ([binPath].concat process.env.PATH.split ':').join ':'\n\n  global.invoke  = invoke\n  global.option  = option\n  global.options = options\n  global.running = running\n  global.task    = task\n  global.tasks   = tasks\n  global.use     = use\n\n  global.watch   = watch # Deprecated\n  global.exec    = exec  # Deprecated\n\nexport {\n  install\n  invoke\n  option\n  options\n  parallel\n  running\n  serial\n  task\n  tasks\n  use\n  version\n  watch\n}\n"],"names":["isString","running","isPromise","invoke","isFunction","resolve","tasks","isGeneratorFunction","invokeGenerator","invokeAsync","invokeSync","isArray","wrapper","options","path","install","join"],"mappings":"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"}